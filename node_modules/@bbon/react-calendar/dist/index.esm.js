import React, { useState, useCallback, useEffect } from 'react';
import dayjs from 'dayjs';
import weekOfYear from 'dayjs/plugin/weekOfYear';
import isBetween from 'dayjs/plugin/isBetween';
import localeData from 'dayjs/plugin/localeData';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var Box = function (_a) {
    var date = _a.date, text = _a.text, isHoliday = _a.isHoliday, isPreviousMonth = _a.isPreviousMonth, isNextMonth = _a.isNextMonth, isToday = _a.isToday, isSelected = _a.isSelected, isSelectedStart = _a.isSelectedStart, isSelectedEnd = _a.isSelectedEnd, canSelect = _a.canSelect, highlightToday = _a.highlightToday, onClick = _a.onClick;
    return (React.createElement("div", { className: "calendar-box " + (isHoliday ? 'calendar-holiday' : '') + " " + (isPreviousMonth ? 'calendar-previous-month' : '') + " " + (isNextMonth ? 'calendar-next-month' : ''), onClick: function () {
            return onClick && date && canSelect ? onClick(date) : undefined;
        } },
        React.createElement("div", { className: "calendar-selectionBox " + (isSelected ? 'calendar-selectionBox-selected' : '') + " " + (isSelectedStart
                ? 'calendar-selectionBox-selected-start'
                : '') + " " + (isSelectedEnd ? 'calendar-selectionBox-selected-end' : '') + " " + (canSelect ? '' : 'calendar-box-disabled') },
            React.createElement("div", { className: "" + (isToday && highlightToday ? 'calendar-today' : '') }, text))));
};

var DateUtil = /** @class */ (function () {
    function DateUtil() {
    }
    /**
     * Date 형식을 확인합니다.
     *
     * @param {(Date | string | number)} value
     * @returns {Date}
     * @memberof Dates
     */
    DateUtil.ensureDateValue = function (value) {
        var dateValue;
        if (typeof value === 'string') {
            var numberValues = value
                .split(/[^0-9]/)
                .map(function (x) { return parseInt(x, 10); });
            if (numberValues.length >= 5) {
                dateValue = new Date(numberValues[0], numberValues[1] - 1, numberValues[2], numberValues[3], numberValues[4], numberValues[5]);
            }
            else {
                dateValue = new Date(value);
            }
        }
        else if (typeof value === 'number') {
            dateValue = new Date(value);
        }
        else {
            dateValue = value;
        }
        return dateValue;
    };
    return DateUtil;
}());

dayjs.extend(isBetween);
dayjs.extend(weekOfYear);
dayjs.extend(localeData);
/**
 * 달력으로 기간을 선택합니다.
 * @param {CalendarProps}
 * @returns
 */
var Calendar = function (_a) {
    var selection = _a.selection, selections = _a.selections, useMoveToYear = _a.useMoveToYear, useMoveToMonth = _a.useMoveToMonth, minDate = _a.minDate, maxDate = _a.maxDate, showDate = _a.showDate, highlightToday = _a.highlightToday, dateFormat = _a.dateFormat, buttonContentProps = _a.buttonContentProps, onChange = _a.onChange;
    var DATE_FORMAT = 'YYYY-MM-DD';
    var _b = useState(selection || dayjs().format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT)), date = _b[0], setDate = _b[1];
    var _c = useState(selections || []), selectedDates = _c[0], setSelectedDates = _c[1];
    var _d = useState([]), records = _d[0], setRecords = _d[1];
    var today = dayjs();
    var updateRecords = useCallback(function (basisDate, sDates, minDate, maxDate) {
        setRecords(function (_) {
            var basis = dayjs(basisDate).startOf('month');
            var startWeek = basis.clone().startOf('month').week();
            var newRecords = [];
            var _loop_1 = function (week) {
                var items = Array(7)
                    .fill(0)
                    .map(function (i, index) {
                    var current = dayjs(basis)
                        .clone()
                        .week(week)
                        .startOf('week')
                        .add(i + index, 'day');
                    var item = {
                        date: current.format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT),
                        text: current.date().toString(),
                        isHoliday: 0 === current.day(),
                        isPreviousMonth: current.month() !== basis.month() &&
                            week === startWeek,
                        isNextMonth: current.month() !== basis.month() &&
                            week !== startWeek,
                        isToday: current.format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT) ===
                            dayjs().format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT),
                        isSelected: sDates &&
                            sDates.length > 0 &&
                            current.isBetween(dayjs(sDates[0]), dayjs(sDates.length === 1
                                ? sDates[0]
                                : sDates[1]), 'day', '[]'),
                        isSelectedStart: sDates &&
                            sDates.length > 0 &&
                            current.format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT) ===
                                dayjs(sDates[0]).format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT),
                        isSelectedEnd: sDates &&
                            sDates.length > 0 &&
                            current.format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT) ===
                                dayjs(sDates.length === 1
                                    ? sDates[0]
                                    : sDates[1]).format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT),
                        canSelect: !minDate && !maxDate
                            ? true
                            : current.isBetween(minDate ? minDate : '0001-01-01', maxDate ? maxDate : '9999-12-31', undefined, '[]'),
                    };
                    return item;
                });
                newRecords.push(items);
                if (basis.month() !== dayjs(items[6].date).month()) {
                    return "break";
                }
            };
            // eslint-disable-next-line no-constant-condition
            for (var week = startWeek; true; week++) {
                var state_1 = _loop_1(week);
                if (state_1 === "break")
                    break;
            }
            return __spreadArray([], newRecords, true);
        });
    }, []);
    var getButtonTitle = function (date, value, interval) {
        var d = dayjs(DateUtil.ensureDateValue(date)).add(value, interval);
        return "Move to " + d.format('YYYY-MM');
    };
    var handleClickPrevYear = function () {
        setDate(function (prevState) {
            return dayjs(prevState)
                .add(-1, 'year')
                .format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT);
        });
    };
    var handleClickPrevMonth = function () {
        setDate(function (prevState) {
            return dayjs(prevState)
                .add(-1, 'month')
                .format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT);
        });
    };
    var handleClickNextMonth = function () {
        setDate(function (prevState) {
            return dayjs(prevState)
                .add(1, 'month')
                .format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT);
        });
    };
    var handleClickNextYear = function () {
        setDate(function (prevState) {
            return dayjs(prevState)
                .add(1, 'year')
                .format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT);
        });
    };
    var handleClickToday = function () {
        setDate(today
            // .toDate()
            .format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT));
    };
    var handleClickBox = function (date) {
        setSelectedDates(function (prevState) {
            if (prevState.length === 1) {
                // prevState.push(date);
                // return [...prevState.sort((a, b) => (a > b ? 1 : -1))];
                return __spreadArray(__spreadArray([], prevState, true), [date], false).sort(function (a, b) { return (a > b ? 1 : -1); });
            }
            else {
                return [date];
            }
        });
    };
    useEffect(function () {
        updateRecords(date, selectedDates, minDate, maxDate);
    }, [date, selections, selectedDates, selection, minDate, maxDate]);
    useEffect(function () {
        if (onChange) {
            var start = void 0;
            var end = void 0;
            if (selectedDates.length === 0) {
                start = undefined;
                end = undefined;
            }
            else if (selectedDates.length === 1) {
                start = selectedDates[0];
                // end = selectedDates[0];
            }
            else {
                start = selectedDates[0];
                end = selectedDates[1];
            }
            onChange(start, end);
        }
    }, [onChange, selectedDates]);
    return (React.createElement("div", { className: "calendar-container" },
        React.createElement("div", { className: "calendar-title" },
            useMoveToYear && (React.createElement("button", { className: "calendar-button previous-year", onClick: handleClickPrevYear, title: getButtonTitle(date, -1, 'year') }, buttonContentProps === null || buttonContentProps === void 0 ? void 0 : buttonContentProps.previousYear)),
            useMoveToMonth && (React.createElement("button", { className: "calendar-button previous-month", onClick: handleClickPrevMonth, title: getButtonTitle(date, -1, 'month') }, buttonContentProps === null || buttonContentProps === void 0 ? void 0 : buttonContentProps.previousMonth)),
            React.createElement("div", null, dayjs(date).format('YYYY년 M월')),
            useMoveToMonth && (React.createElement("button", { className: "calendar-button next-month", onClick: handleClickNextMonth, title: getButtonTitle(date, 1, 'month') }, buttonContentProps === null || buttonContentProps === void 0 ? void 0 : buttonContentProps.nextMonth)),
            useMoveToYear && (React.createElement("button", { className: "calendar-button next-year", onClick: handleClickNextYear, title: getButtonTitle(date, 1, 'year') }, buttonContentProps === null || buttonContentProps === void 0 ? void 0 : buttonContentProps.nextYear))),
        React.createElement("div", { className: "calendar-week-container" }, dayjs.weekdaysMin(true).map(function (item, index) {
            var weekdayNames = [
                '일',
                '월',
                '화',
                '수',
                '목',
                '금',
                '토',
            ];
            var text = weekdayNames[index];
            return (React.createElement(Box, { key: item, text: text, canSelect: true, isHoliday: index === 0 }));
        })),
        records.map(function (a, index) { return (React.createElement("div", { key: (+new Date() + index).toString(), className: "calendar-week-container" }, a.map(function (b) { return (React.createElement(Box, __assign({ key: "" + b.date }, b, { highlightToday: highlightToday, onClick: handleClickBox }))); }))); }),
        showDate && (React.createElement("div", { className: "calendar-bottom-container" },
            React.createElement("button", { onClick: handleClickToday },
                "Today: ",
                today.format(dateFormat !== null && dateFormat !== void 0 ? dateFormat : DATE_FORMAT))))));
};
var Calendar$1 = Calendar;

export { Calendar$1 as Calendar, DateUtil };
//# sourceMappingURL=index.esm.js.map
